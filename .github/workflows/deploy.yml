name: Deploy FitMate

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout app repo (main application)
      - name: Checkout app repo
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials (for Terraform + Secrets Manager)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # 3️⃣ Retrieve GitHub PAT from AWS Secrets Manager
      - name: Retrieve GitHub PAT from AWS Secrets Manager
        id: secrets
        run: |
          PAT=$(aws secretsmanager get-secret-value \
            --secret-id github/pat \
            --region us-east-2 \
            --query SecretString \
            --output text | jq -r '.token')
          echo "PAT=$PAT" >> $GITHUB_ENV

      # 4️⃣ Checkout infra repo (for Terraform + Ansible)
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          repository: sushmithashiva04-ops/infra
          token: ${{ env.PAT }}
          path: infra

      # 5️⃣ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 6️⃣ Terraform Init & Apply (creates EC2)
      - name: Terraform Init & Apply
        working-directory: infra/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      # 7️⃣ Get EC2 Public IP
      - name: Get EC2 Public IP
        id: ec2
        working-directory: infra/terraform
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "✅ Public IP from Terraform: $EC2_IP"

      # 8️⃣ Build and Push Docker Images to Docker Hub
      - name: Build and Push Docker Images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          IMAGE_TAG=latest

          echo "🔑 Logging in to Docker Hub..."
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

          echo "🐳 Building Frontend image..."
          docker build -t $DOCKERHUB_USERNAME/fitmate-frontend:$IMAGE_TAG -f fitmate/Dockerfile.frontend ./fitmate

          echo "⚙️ Building Backend image..."
          docker build -t $DOCKERHUB_USERNAME/fitmate-backend:$IMAGE_TAG -f FitmateV1/Dockerfile.backend ./FitmateV1

          echo "📤 Pushing images to Docker Hub..."
          docker push $DOCKERHUB_USERNAME/fitmate-frontend:$IMAGE_TAG
          docker push $DOCKERHUB_USERNAME/fitmate-backend:$IMAGE_TAG

      # 9️⃣ Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible jq

      # 🔟 Add EC2 host to known_hosts
      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      # 1️⃣1️⃣ Run Ansible Playbook (Pull & Run Docker Images)
      - name: Run Ansible playbook
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EC2_IP: ${{ env.EC2_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        working-directory: infra/ansible
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem

          echo "[fitmate]" > inventory.ini
          echo "${EC2_IP} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/deploy-key.pem" >> inventory.ini

          ansible-playbook -i inventory.ini deploy.yml \
            -e "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
            -e "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
            -e "dockerhub_username=${DOCKERHUB_USERNAME}"
